# Generated by Django 4.2.7 on 2025-10-31 09:11

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('incidents', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CCTVCamera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('camera_id', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='camera ID')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='latitude')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='longitude')),
                ('coverage_radius_meters', models.IntegerField(default=500, verbose_name='coverage radius (meters)')),
                ('installation_date', models.DateTimeField(blank=True, null=True, verbose_name='installation date')),
                ('camera_type', models.CharField(blank=True, max_length=50, verbose_name='camera type')),
                ('protocol', models.CharField(choices=[('RTSP', 'RTSP'), ('ONVIF', 'ONVIF'), ('proprietary', 'Proprietary')], default='RTSP', max_length=20, verbose_name='protocol')),
                ('api_endpoint', models.URLField(blank=True, max_length=500, verbose_name='API endpoint')),
                ('rtsp_url', models.URLField(blank=True, max_length=500, verbose_name='RTSP URL')),
                ('onvif_url', models.URLField(blank=True, max_length=500, verbose_name='ONVIF URL')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='metadata')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Maintenance')], default='active', max_length=20, verbose_name='status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'CCTV camera',
                'verbose_name_plural': 'CCTV cameras',
                'db_table': 'cctv_cameras',
                'ordering': ['camera_id'],
            },
        ),
        migrations.CreateModel(
            name='CCTVFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(db_index=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(verbose_name='end time')),
                ('video_file_path', models.URLField(blank=True, max_length=500, verbose_name='video file path')),
                ('ai_analysis_result', models.JSONField(blank=True, default=dict, verbose_name='AI analysis result')),
                ('incident_detected', models.BooleanField(default=False, verbose_name='incident detected')),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='confidence score')),
                ('manual_review_status', models.CharField(choices=[('pending', 'Pending'), ('reviewed', 'Reviewed'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='manual review status')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='reviewed at')),
                ('blockchain_hash', models.CharField(blank=True, max_length=66, null=True, verbose_name='blockchain hash')),
                ('retention_until', models.DateTimeField(blank=True, null=True, verbose_name='retention until')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'CCTV feed',
                'verbose_name_plural': 'CCTV feeds',
                'db_table': 'cctv_feeds',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='RFIDReader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reader_id', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='reader ID')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='latitude')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='longitude')),
                ('installation_date', models.DateTimeField(blank=True, null=True, verbose_name='installation date')),
                ('manufacturer', models.CharField(blank=True, max_length=100, verbose_name='manufacturer')),
                ('model', models.CharField(blank=True, max_length=100, verbose_name='model')),
                ('api_endpoint', models.URLField(blank=True, max_length=500, verbose_name='API endpoint')),
                ('mqtt_topic', models.CharField(blank=True, max_length=200, verbose_name='MQTT topic')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Maintenance')], default='active', max_length=20, verbose_name='status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'RFID reader',
                'verbose_name_plural': 'RFID readers',
                'db_table': 'rfid_readers',
                'ordering': ['reader_id'],
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_id', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='sensor ID')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='latitude')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='longitude')),
                ('sensor_type', models.CharField(choices=[('traffic_flow', 'Traffic Flow'), ('weather', 'Weather'), ('road_surface', 'Road Surface'), ('air_quality', 'Air Quality'), ('vibration', 'Vibration')], max_length=50, verbose_name='sensor type')),
                ('installation_date', models.DateTimeField(blank=True, null=True, verbose_name='installation date')),
                ('manufacturer', models.CharField(blank=True, max_length=100, verbose_name='manufacturer')),
                ('model', models.CharField(blank=True, max_length=100, verbose_name='model')),
                ('api_endpoint', models.URLField(blank=True, max_length=500, verbose_name='API endpoint')),
                ('mqtt_topic', models.CharField(blank=True, max_length=200, verbose_name='MQTT topic')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='metadata')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Maintenance')], default='active', max_length=20, verbose_name='status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'sensor',
                'verbose_name_plural': 'sensors',
                'db_table': 'sensors',
                'ordering': ['sensor_type', 'sensor_id'],
            },
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, verbose_name='timestamp')),
                ('reading_type', models.CharField(max_length=50, verbose_name='reading type')),
                ('value', models.JSONField(default=dict, verbose_name='value')),
                ('unit', models.CharField(blank=True, max_length=20, verbose_name='unit')),
                ('quality_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='quality score')),
                ('anomaly_detected', models.BooleanField(default=False, verbose_name='anomaly detected')),
                ('blockchain_hash', models.CharField(blank=True, max_length=66, null=True, verbose_name='blockchain hash')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='iot.sensor')),
            ],
            options={
                'verbose_name': 'sensor reading',
                'verbose_name_plural': 'sensor readings',
                'db_table': 'sensor_readings',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='RFIDLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_tag', models.CharField(db_index=True, max_length=255, verbose_name='vehicle tag (hashed)')),
                ('vehicle_registration', models.CharField(blank=True, max_length=255, verbose_name='vehicle registration (hashed)')),
                ('timestamp', models.DateTimeField(db_index=True, verbose_name='timestamp')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='longitude')),
                ('direction', models.CharField(blank=True, max_length=20, verbose_name='direction')),
                ('lane', models.IntegerField(blank=True, null=True, verbose_name='lane number')),
                ('speed', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='speed (km/h)')),
                ('vehicle_type', models.CharField(blank=True, max_length=50, verbose_name='vehicle type')),
                ('vehicle_class', models.CharField(blank=True, max_length=20, verbose_name='vehicle class')),
                ('blockchain_hash', models.CharField(blank=True, max_length=66, null=True, verbose_name='blockchain hash')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('reader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='iot.rfidreader')),
            ],
            options={
                'verbose_name': 'RFID log',
                'verbose_name_plural': 'RFID logs',
                'db_table': 'rfid_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='IncidentValidation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('validation_source', models.CharField(choices=[('citizen_report', 'Citizen Report'), ('rfid', 'RFID'), ('cctv', 'CCTV'), ('sensor', 'Sensor'), ('ai', 'AI Analysis')], max_length=20, verbose_name='validation source')),
                ('confidence_score', models.DecimalField(decimal_places=2, help_text='0-100% confidence', max_digits=5, verbose_name='confidence score')),
                ('validation_status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('contradicted', 'Contradicted'), ('inconclusive', 'Inconclusive')], default='pending', max_length=20, verbose_name='validation status')),
                ('source_data', models.JSONField(blank=True, default=dict, verbose_name='source data')),
                ('correlation_details', models.JSONField(blank=True, default=dict, verbose_name='correlation details')),
                ('validated_at', models.DateTimeField(auto_now_add=True, verbose_name='validated at')),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='validations', to='incidents.incident')),
            ],
            options={
                'verbose_name': 'incident validation',
                'verbose_name_plural': 'incident validations',
                'db_table': 'incident_validations',
                'ordering': ['-validated_at'],
            },
        ),
    ]
