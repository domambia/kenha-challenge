# Generated by Django 4.2.7 on 2025-10-31 09:11

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='phone number')),
                ('role', models.CharField(choices=[('super_admin', 'Super Admin'), ('system_admin', 'System Administrator'), ('tmc_operator', 'Traffic Management Center Operator'), ('dispatcher', 'KeNHA Dispatcher'), ('field_inspector', 'KeNHA Field Inspector'), ('maintenance_crew', 'KeNHA Maintenance Crew'), ('police', 'Police Services'), ('ems', 'Emergency Medical Services'), ('fire_rescue', 'Fire & Rescue Services'), ('towing', 'Towing & Recovery Services'), ('analyst', 'Data Analyst'), ('policy_analyst', 'Policy Analyst'), ('support', 'Customer Support'), ('qa_reviewer', 'Quality Assurance Reviewer'), ('road_user_registered', 'Registered Road User'), ('road_user_anonymous', 'Anonymous Road User')], default='road_user_anonymous', max_length=30, verbose_name='role')),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified')),
                ('phone_verified', models.BooleanField(default=False, verbose_name='phone verified')),
                ('email_verified', models.BooleanField(default=False, verbose_name='email verified')),
                ('mfa_enabled', models.BooleanField(default=False, verbose_name='MFA enabled')),
                ('mfa_secret', models.CharField(blank=True, max_length=32, null=True, verbose_name='MFA secret')),
                ('reputation_score', models.DecimalField(decimal_places=2, default=50.0, max_digits=5, verbose_name='reputation score')),
                ('last_reputation_update', models.DateTimeField(blank=True, null=True, verbose_name='last reputation update')),
                ('blockchain_wallet_address', models.CharField(blank=True, max_length=42, null=True, verbose_name='blockchain wallet')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserReputation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='accuracy score')),
                ('report_count', models.IntegerField(default=0, verbose_name='total reports')),
                ('verified_reports', models.IntegerField(default=0, verbose_name='verified reports')),
                ('false_reports', models.IntegerField(default=0, verbose_name='false reports')),
                ('spam_count', models.IntegerField(default=0, verbose_name='spam count')),
                ('blockchain_hash_reference', models.CharField(blank=True, max_length=66, null=True, verbose_name='blockchain hash')),
                ('last_reputation_update', models.DateTimeField(auto_now=True, verbose_name='last update')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reputation', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user reputation',
                'verbose_name_plural': 'user reputations',
                'db_table': 'user_reputations',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='profile picture')),
                ('department', models.CharField(blank=True, max_length=100, null=True, verbose_name='department')),
                ('organization', models.CharField(blank=True, max_length=100, null=True, verbose_name='organization')),
                ('badge_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='badge number')),
                ('equipment_assigned', models.JSONField(blank=True, default=dict, verbose_name='equipment assigned')),
                ('language', models.CharField(choices=[('en', 'English'), ('sw', 'Swahili')], default='en', max_length=10, verbose_name='language')),
                ('notification_preferences', models.JSONField(blank=True, default=dict, verbose_name='notification preferences')),
                ('location_preferences', models.JSONField(blank=True, default=dict, verbose_name='location preferences')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user profile',
                'verbose_name_plural': 'user profiles',
                'db_table': 'user_profiles',
            },
        ),
    ]
